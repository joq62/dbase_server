%%% -------------------------------------------------------------------
%%% Author  : uabjle
%%% Description : dbase using dets 
%%% 
%%% Created : 10 dec 2012
%%% -------------------------------------------------------------------
-module(lib_dbase).   
   
%% --------------------------------------------------------------------
%% Include files
%% --------------------------------------------------------------------

%%---------------------------------------------------------------------
%% Records for test
%%

%% --------------------------------------------------------------------
%-compile(export_all).

-export([
	 load_textfile/2,
	 dynamic_db_init/1,
	 dynamic_add_table/2
	 ]).
%% ====================================================================
%% External functions
%% ====================================================================

%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% --------------------------------------------------------------------
load_textfile(File,AppTables)->
    Tables=[Table||Table<-rpc:call(N1,mnesia,system_info,[tables],5000),
		   lists:member(Table,AppsTables)],
    [rpc:call(N1,mnesia,load_textfile,[TextFile],5000)||{Table,TextFile}<-TableTextFiles,
							false=:=lists:member(Table,Tables)],
    [{N,Table,rpc:call(N,dbase,dynamic_add_table,[Table,ram_copies],5000)}||N<-sd:get(dbase_infra),
									    Table<-AppsTables].

%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% --------------------------------------------------------------------
dynamic_db_init([])->
    io:format(" ~p~n",[{node(),?FUNCTION_NAME,?MODULE,?LINE}]),
    mnesia:stop(),
    mnesia:del_table_copy(schema,node()),
    mnesia:delete_schema([node()]),
    mnesia:start(),   
    ok;

dynamic_db_init([DbaseNode|T])->
%    io:format("DbaseNode dynamic_db_init([DbaseNode|T]) ~p~n",[{DbaseNode,node(),?FUNCTION_NAME,?MODULE,?LINE}]),
    mnesia:stop(),
    mnesia:del_table_copy(schema,node()),
    mnesia:delete_schema([node()]),
    mnesia:start(),
%io:format("DbaseNode dynamic_db_init([DbaseNode|T]) ~p~n",[{DbaseNode,node(),?FUNCTION_NAME,?MODULE,?LINE}]),
    StorageType=ram_copies,
  %  case rpc:call(DbaseNode,mnesia,change_config,[extra_db_nodes, [node()]],5000) of
    case rpc:call(node(),mnesia,change_config,[extra_db_nodes,[DbaseNode]],5000) of
	{ok,[_AddedNode]}->
	    Tables=mnesia:system_info(tables),
	    [mnesia:add_table_copy(Table, node(),StorageType)||Table<-Tables,
							       Table/=schema],
	    mnesia:wait_for_tables(Tables,20*1000),
	    ok;
	_Reason ->
	    dynamic_db_init(T) 
    end.



dynamic_add_table(Table,StorageType)->
  %  io:format("Module ~p~n",[{Module,node(),?FUNCTION_NAME,?MODULE,?LINE}]),

    Result=case lists:member(Table,mnesia:system_info(tables)) of
	       true->
		   {error,[exists,Table]};
	       false->
		   AddedNode=node(),
		   _T_result=mnesia:add_table_copy(Table, AddedNode, StorageType),
 %   io:format("T_result ~p~n",[{T_result,node(),?FUNCTION_NAME,?MODULE,?LINE}]),
		   Tables=mnesia:system_info(tables),
		   mnesia:wait_for_tables(Tables,20*1000).


%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% --------------------------------------------------------------------

%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% --------------------------------------------------------------------
add_table(Node,Table,StorageType)->
    mnesia:add_table_copy(Table, Node, StorageType),
    Tables=mnesia:system_info(tables),
    mnesia:wait_for_tables(Tables,20*1000).


%add_table(StorageType)->
%    mnesia:add_table_copy(?TABLE, node(), StorageType),
%    Tables=mnesia:system_info(tables),
%    mnesia:wait_for_tables(Tables,20*1000).
%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% --------------------------------------------------------------------

create(Record)->
    F = fun() ->
		mnesia:write(Record)
	end,
    mnesia:transaction(F).

delete(Table,RecordToRemove)->
    F = fun() -> 
		All=do_qlc(Table),
		RecordList=[Record||Record<-All,
			   Record=:=RecordToRemove],
		case RecordList of
		    []->
			mnesia:abort(Table);
		    [Record]->
			mnesia:delete_object(Record)
		end
		 
	end,
    mnesia:transaction(F).
%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% --------------------------------------------------------------------
update(Table,RecordToUpdate,EntryNum,NewData)->
    F = fun() -> 
		All=do_qlc(Table),
		RecordList=[Record||Record<-All,
				 Record=:=RecordToUpdate],
		case RecordList of
		    []->
			mnesia:abort(Table);
		    [Record]->
			RecordAsList=tuple_to_list(Record),
			{Head,Tail}=lists:split(EntryNum,RecordAsList),
			[_DataToChange|Tail2]=Tail,
						%io:format("Head,DataToChange,Tail2  ~p~n",[{Head,DataToChange,Tail2,?FUNCTION_NAME,?MODULE,?LINE}]),
			NewRecordAsList=lists:append(Head,[NewData|Tail2]),
			NewRecord=list_to_tuple(NewRecordAsList),
			mnesia:delete_object(Record),
			mnesia:write(NewRecord)
		end
		    
	end,
    mnesia:transaction(F).

%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% --------------------------------------------------------------------

do_qlc(Table) ->
    Q=qlc:q([X || X <- mnesia:table(Table)]),
    F = fun() -> qlc:e(Q) end,
    Result=case mnesia:transaction(F) of
	       {atomic, Val}->
		   Val;
	       Error->
		   Error
	   end,
    Result.
%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% --------------------------------------------------------------------

%% --------------------------------------------------------------------
%% Function:start/0 
%% Description: Initiate the eunit tests, set upp needed processes etc
%% Returns: non
%% --------------------------------------------------------------------
